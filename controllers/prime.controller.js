const { faker } = require("@faker-js/faker");
const {
  cAccountRouting,
  cAccounts,
  cardStatusX,
  cardX,
  cExtension,
  cTransactions,
  products,
  applog,
  currencies,
  people,
  // cAddressLinks,
  // cardEmbossing,
  // countries,
  // cStatementLinks,
  // cStatements,
  // products,
  // riskDomains,
  // trxnTypes,
} = require("../models");

function generateMockDataFromType(dataType) {
  const match = dataType.match(/^(\w+)(?:\((\d+)\))?/);
  const type = match[1];
  const length = match[2] ? parseInt(match[2], 10) : null;

  let numberFunc;
  if (dataType === "NUMBER(16,3)") {
    numberFunc = faker.string.numeric(16);
  } else if (dataType === "NUMBER(18,3)") {
    numberFunc = faker.string.numeric(18);
  } else if (dataType === "NUMBER(32,16)") {
    numberFunc = faker.string.numeric(18);
  } else if (dataType === "NUMBER(1)") {
    numberFunc = faker.helpers.arrayElement([0, 1, 2, 3, 4]);
  } else if (dataType === "NUMBER(2)") {
    numberFunc = faker.helpers.arrayElement([0, 1]);
  } else if (length) {
    numberFunc = faker.string.numeric(length);
  }

  const dataTypeMappings = {
    NUMBER: () => numberFunc,
    VARCHAR2: () => faker.string.alphanumeric(length || 10),
    DATE: () => faker.date.anytime(10).toISOString().substring(0, 10),
    CHAR: () => faker.string.alphanumeric(length || 1),
    NCHAR: () => faker.string.alphanumeric(length || 1),
    NVARCHAR2: () => faker.string.alphanumeric(length || 10),
    RAW: () => faker.string.hexadecimal({ length: 10, casing: "upper" }),
  };

  if (dataTypeMappings[type]) {
    return dataTypeMappings[type]();
  } else {
    throw new Error(`Unsupported data type: ${dataType}`);
  }
}

const tables = [
  {
    tableName: cAccountRouting,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
  SERNO	N	NUMBER(10)
  CACCSERNO	N	NUMBER(10)
  FROMCACCSERNO	Y	NUMBER(10)
  CARDXSERNO	Y	NUMBER(10)
  RTRXNTYPE	N	NUMBER(10)
  POSTONACCOUNT	Y	NUMBER(1)
  REJTRXNSTATUS	Y	CHAR(4 BYTE)
  RISKDOMAINSERNO	Y	NUMBER(10)
  LOGACTION	Y	CHAR(11)
  CONVERTED	Y	NUMBER(2)
  `,
  },
  {
    tableName: cAccounts,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
SERNO	N	NUMBER(10)
CUSTSERNO	N	NUMBER(10)
NUMBERX	N	CHAR(25 BYTE)
PRIMARYCARDSERNO	Y	NUMBER(10)
RISKDOMAINSERNO	Y	NUMBER(10)
ACCOUNTTYPE	N	CHAR(1 BYTE)
BILLINGMETHOD	N	CHAR(1 BYTE)
DAILYACCRUALFLAG	Y	NUMBER(5)
PRODUCT	N	NUMBER(5)
CURRENCY	N	CHAR(3 BYTE)
CREDITLIMIT	N	NUMBER(16,3)
BALANCE	N	NUMBER(16,3)
OPENINGMINAMOUNT	N	NUMBER(16,3)
MINAMOUNT	N	NUMBER(16,3)
MINAMOUNTWAIVED	Y	NUMBER(16,3)
MINAMTDUEDATE	Y	DATE
MINAMTPRINTDUEDATE	Y	DATE
OVERDUEAMOUNT	N	NUMBER(16,3)
OVERDUEDATE	Y	DATE
CUREOVERDUEDATE	Y	DATE
CUREOVERDUELASTUPDDATE	Y	DATE
LASTMINAMOUNTWAIVEDDATE	Y	DATE
STOPDAILYACCRUALREPDATE	Y	DATE
PAYMENTINDICATOR	N	NUMBER(10)
ALLOCPROFSERNO	Y	NUMBER(10)
FEEPROFSERNO	Y	NUMBER(10)
TRXNFEEPROFSERNO	Y	NUMBER(10)
INSTPROFSERNO	Y	NUMBER(10)
REWARDPROFSERNO	Y	NUMBER(10)
CAPROFSERNO	Y	NUMBER(10)
SERVICEFEEOVERRIDESEXIST	N	NUMBER(5)
TRXNFEEOVERRIDESEXIST	N	NUMBER(5)
STGENERAL	N	CHAR(4 BYTE)
STFINANCIAL	N	CHAR(4 BYTE)
STAUTHORIZATION	N	CHAR(4 BYTE)
PRECHANGEREQUESTSTGENERAL	Y	CHAR(4 BYTE)
NEXTSTMTSERNO	Y	NUMBER(10)
NEXTSTMTPARTITIONKEY	Y	NUMBER(10)
TOTALPOINTS	N	NUMBER(16,3)
TOTALPOINTTRXNS	N	NUMBER(10)
TOTALCREDITS	N	NUMBER(16,3)
TOTALDEBITS	N	NUMBER(16,3)
THISPERIODDUE	N	NUMBER(16,3)
RETURNEDPAYMENTS	N	NUMBER(16,3)
BACKDATEDCREDITS	N	NUMBER(16,3)
BACKDATEDDEBITS	N	NUMBER(16,3)
BACKDATEDPAYMENTS	N	NUMBER(16,3)
BACKDATEDRETURNEDPAYMENTS	N	NUMBER(16,3)
LASTBILLINGDATE	Y	DATE
LASTTRXNPOSTDATE	Y	DATE
LASTACTIVITYTRXNPOSTDATE	Y	DATE
LASTPAYMENTSERNO	Y	NUMBER(10)
LASTPAYMENTPARTITIONKEY	Y	NUMBER(10)
LASTBALUPDEODSERNO	Y	NUMBER(10)
PREVBALUPDEODSERNO	Y	NUMBER(10)
LASTMTPUPDEODSERNO	Y	NUMBER(10)
PREVMTPUPDEODSERNO	Y	NUMBER(10)
INSTALMENTCOUNT	Y	NUMBER(5)
INSTALMENTBALANCE	N	NUMBER(16,3)
INSTALMENTBALANCEPRINCIPAL	N	NUMBER(16,3)
ISSINSTBALANCE	N	NUMBER(16,3)
ACQINSTBALANCE	N	NUMBER(16,3)
CASHBALANCE	N	NUMBER(16,3)
CREATEDATE	N	DATE
CLOSEDATE	Y	DATE
EXCESSPAYMENTAMOUNT	N	NUMBER(16,3)
LATEPAYMENTFEE	Y	NUMBER(16,3)
ACTIVITYSINCELASTSTATEMENT	N	NUMBER(18,3)
TRANSACTORHISTORY	Y	CHAR(12)
STATEMENTINSTALMENTSALLOWED	N	NUMBER(5)
STATEMENTINSTALMENTSMAXNUM	N	NUMBER(5)
STATEMENTINSTALMENTSACTIVENUM	Y	NUMBER(5)
AUTOREDEEMCYCLESTOSKIP	Y	NUMBER(5)
COLLECTORCASE	Y	NUMBER(10)
DORMANTACCTYPESERNO	Y	NUMBER(10)
REPAYMENTPLANSERNO	Y	NUMBER(10)
REPAYMENTPLANPARTITIONKEY	Y	NUMBER(10)
MBHAGREEMENTEXPIRYDATE	Y	DATE
REALFLAG	Y	NUMBER(1)
EXCLUDEFROMPROBE	Y	CHAR(1)
LANGUAGECODE	Y	VARCHAR2(10 BYTE)
LOGACTION	Y	CHAR(11)
ENTITYVERSIONNO	Y	NUMBER(10)
CONVERTED	Y	NUMBER(2)
MBHAGREEMENTSERNO	Y	NUMBER(10)
PAIDINFULLBALANCE	N	NUMBER(16,3)
LASTBILLINGREASON	Y	CHAR(1)
LATEPAYMENTFEETRXNSERNO	Y	NUMBER(10)
LATEPAYMENTFEETRXNPARTITIONKEY	Y	NUMBER(10)
`,
  },
  {
    tableName: cardStatusX,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
PSERNO	N	NUMBER(10)
CODE	N	CHAR(4 BYTE)
DESCRIPTION	N	VARCHAR2(255)
CARD	N	NUMBER(5)
ACCOUNT	N	NUMBER(5)
CUSTOMER	N	NUMBER(5)
RISKDOMAIN	N	NUMBER(5)
COLINVOICE	N	NUMBER(5)
GENERAL	N	NUMBER(5)
FINANCIAL	N	NUMBER(5)
EMBOSSING	N	NUMBER(5)
AUTH	N	NUMBER(5)
TRXNREJECT	N	NUMBER(5)
AUTHMAP	Y	CHAR(2 BYTE)
BILLABLE	N	NUMBER(5)
STOPRENEW	N	NUMBER(5)
STOPREPLACE	N	NUMBER(5)
STOPREISSUE	N	NUMBER(5)
HOLDSERVICEFEES	N	NUMBER(5)
SUPPRESSFEES	N	NUMBER(5)
SUPPRESSREDEMPTION	N	NUMBER(5)
SUPPRESSINTEREST	N	NUMBER(5)
DELINQUENT	N	NUMBER(5)
STICKY	N	NUMBER(5)
STMTPRINTNOTSEND	Y	NUMBER(5)
CLOSED	N	NUMBER(5)
STATUSTYPE	N	NUMBER(5)
STOPMAILING	Y	NUMBER(5)
CANCELINSURANCE	Y	NUMBER(5)
NOTIFYBUREAU	Y	NUMBER(5)
PRIORITY	Y	NUMBER(5)
ACCOUNTTYPES	Y	VARCHAR2(10 BYTE)
MAPFINANCIAL	Y	CHAR(4 BYTE)
MAPEMBOSSING	Y	CHAR(4 BYTE)
MAPAUTHORIZATION	Y	CHAR(4 BYTE)
MAPCARD	Y	CHAR(4 BYTE)
MAPACCOUNT	Y	CHAR(4 BYTE)
MAPCUSTOMER	Y	CHAR(4 BYTE)
MAPLEVELUPSTATUS	Y	CHAR(4 BYTE)
MAPLEVELUPDEPTH	Y	NUMBER(5)
MAPLEVELDOWNSTATUS	Y	CHAR(4 BYTE)
MAPLEVELDOWNDEPTH	Y	NUMBER(5)
ALLOWSTMTINSTALMENTOFFERS	Y	NUMBER(5)
AMEXREASONCODE	Y	CHAR(4 BYTE)
NEGATIVEREASONCODES	Y	VARCHAR2(250)
ADDSERVICE	Y	CHAR(4 BYTE)
ADDSERVICELOGACTION	Y	CHAR(11)
CURRACTIVATIONSTATUS	Y	CHAR(1 BYTE)
PREVACTIVATIONSTATUS	Y	CHAR(1 BYTE)
CUSTOMERGENERALPERMISSIONID	Y	NUMBER(10)
ACCOUNTGENERALPERMISSIONID	Y	NUMBER(10)
ACCOUNTFINANCIALPERMISSIONID	Y	NUMBER(10)
ACCOUNTAUTHPERMISSIONID	Y	NUMBER(10)
CARDGENERALPERMISSIONID	Y	NUMBER(10)
CARDFINANCIALPERMISSIONID	Y	NUMBER(10)
CARDEMBOSSINGPERMISSIONID	Y	NUMBER(10)
CARDAUTHPERMISSIONID	Y	NUMBER(10)
ACCCLOSEOPTION	Y	NUMBER(1)
ACCELERATEINSTALMENTS	Y	NUMBER(1)
OVERRIDEINTREFUNDMETHODONACCL	Y	NUMBER(5)
WAIVEACCELERATIONFEE	Y	NUMBER(1)
EXCLUDE3DENROLMENT	Y	NUMBER(1)
LOGVERSION	Y	NUMBER(5)
`,
  },
  {
    tableName: cardX,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
SERNO	N	NUMBER(10)
CACCSERNO	N	NUMBER(10)
NUMBERX	N	CHAR(25 BYTE)
PRIMARYCARD	N	NUMBER(5)
PEOPLESERNO	N	NUMBER(10)
RISKDOMAINSERNO	Y	NUMBER(10)
PRODUCT	N	NUMBER(5)
FEEPROFSERNO	Y	NUMBER(10)
TRXNFEEPROFSERNO	Y	NUMBER(10)
INSTPROFSERNO	Y	NUMBER(10)
REWARDPROFSERNO	Y	NUMBER(10)
CAPROFSERNO	Y	NUMBER(10)
SERVICEFEEOVERRIDESEXIST	N	NUMBER(5)
TRXNFEEOVERRIDESEXIST	N	NUMBER(5)
SERVICECODE	Y	CHAR(3 BYTE)
EXPIRYDATE	Y	DATE
EXPIRYDATESTATUS	Y	CHAR(1 BYTE)
EXPIRYPERIODRENEW	Y	NUMBER(5)
PREVIOUSEXPIRYDATE	Y	DATE
PREVEXPIRYDATESTATUS	Y	CHAR(1 BYTE)
CREATEDATE	Y	DATE
BLOCKEDDATE	Y	DATE
CLOSEDATE	Y	DATE
OLDCARDSERNO	Y	NUMBER(10)
NEWCARDSERNO	Y	NUMBER(10)
STGENERAL	N	CHAR(4 BYTE)
STFINANCIAL	N	CHAR(4 BYTE)
STAUTHORIZATION	N	CHAR(4 BYTE)
STEMBOSSING	N	CHAR(4 BYTE)
PRECHANGEREQUESTSTGENERAL	Y	CHAR(4 BYTE)
MASTERPROFILESERNO	Y	NUMBER(10)
REALFLAG	Y	NUMBER(1)
CARDCOUNTRY	Y	CHAR(3 BYTE)
VIRTUAL	N	NUMBER(5)
APPLICATIONSERNO	Y	NUMBER(10)
ACCSTMTSUMMARYIND	Y	NUMBER(5)
SENDMEMOSTATEMENT	Y	NUMBER(5)
LOGACTION	Y	CHAR(11)
DEFAULTACCOUNTTYPE	Y	VARCHAR2(2 BYTE)
INSTANTISSUANCE	Y	NUMBER(5)
LANGUAGECODE	Y	VARCHAR2(10 BYTE)
PVVVERSIONNO	Y	NUMBER(10)
CARDACTIVEVERSIONNO	Y	NUMBER(10)
ENTITYVERSIONNO	Y	NUMBER(10)
EXTERNALREFERENCE	Y	VARCHAR2(25 BYTE)
ACSENROLMENTSTATUS	Y	CHAR(1 BYTE)
ACSPASSWORDMODEL	Y	NUMBER(1)
CONVERTED	Y	NUMBER(2)
AUTHFEEPROFSERNO	Y	NUMBER(10)
PRIORITYPASSCARD	Y	NUMBER(1)
PRIORITYPASSCARDSERNO	Y	NUMBER(10)
`,
  },
  {
    tableName: cExtension,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
ROWSERNO	N	NUMBER(10)
TABINDICATOR	N	CHAR(1 BYTE)
FIELDNO	N	NUMBER(5)
VALUE	Y	VARCHAR2(255)
LOGACTION	Y	VARCHAR2(20)
ACTIONDATE	Y	DATE
ENTITYVERSIONNO	Y	NUMBER(10)
CONVERTED	Y	NUMBER(2)
`,
  },
  {
    tableName: cTransactions,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
SERNO	N	NUMBER(10)
PARTITIONKEY	N	NUMBER(10)
CACCSERNO	Y	NUMBER(10)
CARDSERNO	Y	NUMBER(10)
DEF_CACCSERNO	Y	NUMBER(10)
PRODUCT	Y	NUMBER(5)
BATCHSERNO	N	NUMBER(10)
TYPESERNO_ALLOC	Y	NUMBER(10)
TYPESERNO_FEES	Y	NUMBER(10)
TYPESERNO_REPORTS	Y	NUMBER(10)
TYPESERNO_REWARDS	Y	NUMBER(10)
TYPESERNO_GLEDGER	Y	NUMBER(10)
TYPESERNO_DIVERT	Y	NUMBER(10)
TYPESERNO_NOPOST	Y	NUMBER(10)
TYPESERNO_PROBE	Y	NUMBER(10)
TYPESERNO_TEXT	Y	NUMBER(10)
MSGCLASS	Y	NUMBER(10)
MSGTYPE	Y	NUMBER(10)
TRXNTYPE	Y	NUMBER(10)
ORIG_MSG_TYPE	N	CHAR(5 BYTE)
I000_MSG_TYPE	N	CHAR(4 BYTE)
I002_NUMBER	N	CHAR(25 BYTE)
I003_PROC_CODE	N	CHAR(6 BYTE)
I004_AMT_TRXN	Y	NUMBER(16,3)
I005_AMT_SETTLE	Y	NUMBER(16,3)
I006_AMT_BILL	Y	NUMBER(16,3)
I007_LOAD_DATE	N	DATE
I008_BILLING_FEE	Y	NUMBER(16,3)
I013_TRXN_DATE	N	DATE
I044_REASON_CODE	Y	CHAR(4 BYTE)
I048_TEXT_DATA	Y	VARCHAR2(254)
I049_CUR_TRXN	Y	CHAR(3 BYTE)
I050_CUR_SETTLE	Y	CHAR(3 BYTE)
I051_CUR_BILL	Y	CHAR(3 BYTE)
INSTALMENTTYPE	Y	NUMBER(5)
INSTALMENTINDEPFLAG	Y	NUMBER(5)
INSTALMENTSNUMBER	Y	NUMBER(5)
INSTALMENTSEQ	Y	NUMBER(5)
INSTALMENTREPAYMENTTYPE	Y	NUMBER(5)
INSTALMENTOFFSET	Y	NUMBER(5)
INSTALMENTORIGAMOUNT	Y	NUMBER(16,3)
INSTALMENTTOTALAMOUNT	Y	NUMBER(16,3)
INSTALMENTPLANSERNO	Y	NUMBER(10)
INSTALMENTINTERESTANCHORDATE	Y	DATE
INSTALMENTSERNO	Y	NUMBER(10)
INSTALMENTPARTITIONKEY	Y	NUMBER(10)
INSTALMENTAMRTPRINCIPALAMOUNT	Y	NUMBER(16,3)
SINGLE_MSG_FLAG	Y	NUMBER(5)
AUTHIMMEDIATEPOSTING	Y	CHAR(1 BYTE)
AUTHACCOUNTTYPE	Y	VARCHAR2(2 BYTE)
AUTHAMOUNT	Y	NUMBER(16,3)
ORIGINATOR	Y	VARCHAR2(50)
ORIGINATORREASONCODE	Y	VARCHAR2(10)
PROXYCARDNUMBER	Y	CHAR(25 BYTE)
INVOICENUMBER	Y	CHAR(25 BYTE)
AMOUNT	N	NUMBER(16,3)
EMBEDDEDFEE	N	NUMBER(16,3)
TOTALPOINTS	Y	NUMBER(32,16)
TOTALREBATES	N	NUMBER(32,16)
TAXFLAG	Y	NUMBER(5)
TAXBASEAMOUNT	Y	NUMBER(16,3)
VALUEDATE	Y	DATE
STARTOFINTEREST	Y	DATE
MINDUEVALUEDATE	Y	DATE
POSTDATE	Y	DATE
POSTTIMESTAMP	Y	DATE
TEXTDESCRIPTION	Y	VARCHAR2(100)
FGRESOLUTIONSTATUS	Y	VARCHAR2(20 BYTE)
STGENERAL	N	CHAR(4 BYTE)
LOGACTION	Y	CHAR(11)
CONVERTED	Y	NUMBER(2)
CONSOLIDATIONKEY	Y	NUMBER(10)
REWARDSFLAG	Y	NUMBER(5)
MBHAGREEMENTSERNO	Y	NUMBER(10)
`,
  },
  {
    tableName: products,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
    SERNO	N	NUMBER(10)
    SHORTCODE	N	VARCHAR2(5)
    GROUPCODE	Y	VARCHAR2(30)
    NAME	N	VARCHAR2(30)
    NAMESTRINGID	N	NUMBER(10)
    DESCRIPTION	Y	VARCHAR2(255)
    DESCRIPTIONSTRINGID	N	NUMBER(10)
    APPLIESTOCUSTOMER	N	CHAR(1)
    APPLIESTOACCOUNT	N	CHAR(1)
    APPLIESTOCARD	N	CHAR(1)
    APPLIESTORISKDOMAIN	N	CHAR(1)
    APPLIESTOPROXYCARD	N	CHAR(1)
    APPLIESTOMERCUSTOMER	N	CHAR(1)
    APPLIESTOMERACCOUNT	N	CHAR(1)
    APPLIESTOMERCHANT	N	CHAR(1)
    APPLIESTOTERMINAL	N	CHAR(1)
    APPLIESTOLOAN	N	CHAR(1)
    `,
  },
  {
    tableName: applog,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
    LOGGROUPKEY	Y	RAW(16)
    EODSERNO	N	NUMBER(10)
    EODCYCLESERNO	Y	NUMBER(10)
    PARTITIONKEY	N	NUMBER(10)
    TABNAME	N	VARCHAR2(30 BYTE)
    COLNAME	Y	VARCHAR2(30 BYTE)
    ROWSERNO	N	NUMBER(10)
    ROWPARTITIONKEY	Y	NUMBER(10)
    DATETIMESTAMP	N	DATE
    ACTIONTYPE	N	CHAR(1 BYTE)
    ACTION	Y	CHAR(11)
    USERNAME	Y	VARCHAR2(250)
    REQUESTORID	Y	VARCHAR2(250)
    OLDVALUE	Y	VARCHAR2(255)
    NEWVALUE	Y	VARCHAR2(255)
    CONVERTED	Y	NUMBER(2)
    `,
  },
  {
    tableName: currencies,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
    SERNO	N	NUMBER(10)
    NUMCODE	N	CHAR(3)
    ALPHACODE	N	CHAR(3)
    NAME	N	VARCHAR2(30)
    NAMESTRINGID	N	NUMBER(10)
    DECDIGITS	N	NUMBER(1)
    VISADIGITS	N	NUMBER(1)
    MCDIGITS	N	NUMBER(1)
    `,
  },
  {
    tableName: people,
    tableData: `INSTITUTION_ID	N	NUMBER(5)
    SERNO	N	NUMBER(10)
    TITLE	Y	NCHAR(20)
    LASTNAME	N	NVARCHAR2(70)
    FIRSTNAME	Y	NCHAR(30)
    MIDNAME	Y	NVARCHAR2(30)
    MOTHERNAME	Y	NVARCHAR2(30)
    ORGANIZATION	Y	NVARCHAR2(30)
    DEPARTMENT	Y	NVARCHAR2(30)
    POSITION	Y	NVARCHAR2(30)
    DOB	Y	DATE
    PERSONTYPE	Y	NUMBER(5)
    SEX	Y	CHAR(1 BYTE)
    MARITALSTATUS	Y	CHAR(1 BYTE)
    SSNUMBER	Y	VARCHAR2(30)
    CUSTIDNUMBER	Y	CHAR(25)
    RESIDENT	Y	CHAR(1 BYTE)
    LEGALENTITY	N	NUMBER(5)
    EMPLOYEEID	Y	NVARCHAR2(30)
    STGENERAL	N	CHAR(4 BYTE)
    LANGUAGECODE	Y	VARCHAR2(10 BYTE)
    LOGACTION	Y	CHAR(11)
    LL_TITLE	Y	NCHAR(20)
    LL_FIRSTNAME	Y	NCHAR(30)
    LL_MIDNAME	Y	NCHAR(30)
    LL_LASTNAME	Y	NVARCHAR2(70)
    LL_MOTHERNAME	Y	NVARCHAR2(30)
    LL_ORGANIZATION	Y	NVARCHAR2(30)
    LL_DEPARTMENT	Y	NVARCHAR2(30)
    LL_POSITION	Y	NVARCHAR2(30)
    ENTITYVERSIONNO	Y	NUMBER(10)
    CONVERTED	Y	NUMBER(2)
    EXTERNALREFERENCE	Y	VARCHAR2(25)
    `,
  },
];

const generateFakeData = async (Table, data, toReference) => {
  const regex = new RegExp("\t|\n");
  const splits = data.trim().split(regex);
  const splittedArray = splits.map((cell) => cell.trim());
  const groupSize = 3;
  const groupedArray = [];

  for (let i = 0; i < splittedArray.length; i += groupSize) {
    const group = splittedArray.slice(i, i + groupSize);
    groupedArray.push(group);
  }

  const mockData = {};

  for (const item of groupedArray) {
    const [key, , type] = item;

    mockData[key] = generateMockDataFromType(type);

    if (toReference?.length) {
      toReference.map(
        (header) => (mockData[header.columnHeader] = header.replaceWith)
      );
    }
  }

  const tbInstance = new Table(mockData);
  const newTableData = await tbInstance.save();

  return newTableData;
};

exports.generateMockData = async (req, res, next) => {
  try {
    const dataPerDocument = 10;
    tables.forEach(async ({ tableName, tableData }) => {
      await tableName.deleteMany({});
      for (let i = 0; i < dataPerDocument; i++) {
        const data = await generateFakeData(tableName, tableData);
        console.log(data);
      }
    });

    return res.json({ message: "success" });
  } catch (err) {
    next(err);
  }
};

const findCollection = (tableName) => {
  return tables.find((table) => table.tableName === tableName);
};

const generateDataForCollection = async (tableName, toReference) => {
  const collectionName = findCollection(tableName);
  const collectionData = await generateFakeData(
    collectionName.tableName,
    collectionName.tableData,
    toReference
  );

  return collectionData;
};

const dataGenerator = async () => {
  const cardXData = await generateDataForCollection(cardX);

  const cAccountsData = await generateDataForCollection(cAccounts, [
    { columnHeader: "SERNO", replaceWith: cardXData.SERNO },
  ]);

  const peopleData = await generateDataForCollection(people, [
    { columnHeader: "SERNO", replaceWith: cardXData.SERNO },
  ]);

  const productsData = await generateDataForCollection(products, [
    { columnHeader: "SERNO", replaceWith: cAccountsData.SERNO },
  ]);

  const cardStatusXData = await generateDataForCollection(cardStatusX, [
    {
      columnHeader: "INSTITUTION_ID",
      replaceWith: cAccountsData.INSTITUTION_ID,
    },
    {
      columnHeader: "CODE",
      replaceWith: cAccountsData.STGENERAL,
    },
  ]);

  const cTransactionsData = await generateDataForCollection(cTransactions, [
    { columnHeader: "CACCSERNO", replaceWith: cAccountsData.SERNO },
    { columnHeader: "CARDSERNO", replaceWith: cardXData.SERNO },
  ]);

  const currenciesData = await generateDataForCollection(currencies, [
    { columnHeader: "NUMCODE", replaceWith: cAccountsData.SERNO },
  ]);

  const cAccountRoutingData = await generateDataForCollection(cAccountRouting, [
    { columnHeader: "CACCSERNO", replaceWith: cAccountsData.SERNO },
  ]);

  const cExtensionData = await generateDataForCollection(cExtension, [
    { columnHeader: "ROWSERNO", replaceWith: cardXData.SERNO },
  ]);
  const applogData = await generateDataForCollection(applog);

  return;
};

const deleteAllEntry = async () => {
  return tables.forEach(async (table) => {
    await table.tableName.deleteMany();
  });
};

exports.generatePrimeWithRelation = async (req, res, next) => {
  try {
    const MAX_DATA = 100;

    await deleteAllEntry();
    for (let i = 0; i < MAX_DATA; i++) {
      await await dataGenerator();
    }

    return res.json({ success: true });
  } catch (err) {
    next(err);
  }
};
