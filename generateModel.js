const fs = require("fs/promises");

const itemType = (type) => {
  const regexNumber = /Number/gi;
  const regexChar = /CHAR|NUMBER/gi;
  const regexDate = /DATE/gi;

  if (regexNumber.test(type)) {
    return "Number";
  } else if (regexChar.test(type)) {
    return "String";
  } else if (regexDate.test(type)) {
    return "Date";
  }
  return "String";
};

const generateMongooseModel = async () => {
  const data = `INSTITUTION_ID	N	NUMBER(5)
  SERNO	N	NUMBER(10)
  CUSTSERNO	N	NUMBER(10)
  NUMBERX	N	CHAR(25 BYTE)
  PRIMARYCARDSERNO	Y	NUMBER(10)
  RISKDOMAINSERNO	Y	NUMBER(10)
  ACCOUNTTYPE	N	CHAR(1 BYTE)
  BILLINGMETHOD	N	CHAR(1 BYTE)
  DAILYACCRUALFLAG	Y	NUMBER(5)
  PRODUCT	N	NUMBER(5)
  CURRENCY	N	CHAR(3 BYTE)
  CREDITLIMIT	N	NUMBER(16,3)
  BALANCE	N	NUMBER(16,3)
  OPENINGMINAMOUNT	N	NUMBER(16,3)
  MINAMOUNT	N	NUMBER(16,3)
  MINAMOUNTWAIVED	Y	NUMBER(16,3)
  MINAMTDUEDATE	Y	DATE
  MINAMTPRINTDUEDATE	Y	DATE
  OVERDUEAMOUNT	N	NUMBER(16,3)
  OVERDUEDATE	Y	DATE
  CUREOVERDUEDATE	Y	DATE
  CUREOVERDUELASTUPDDATE	Y	DATE
  LASTMINAMOUNTWAIVEDDATE	Y	DATE
  STOPDAILYACCRUALREPDATE	Y	DATE
  PAYMENTINDICATOR	N	NUMBER(10)
  ALLOCPROFSERNO	Y	NUMBER(10)
  FEEPROFSERNO	Y	NUMBER(10)
  TRXNFEEPROFSERNO	Y	NUMBER(10)
  INSTPROFSERNO	Y	NUMBER(10)
  REWARDPROFSERNO	Y	NUMBER(10)
  CAPROFSERNO	Y	NUMBER(10)
  SERVICEFEEOVERRIDESEXIST	N	NUMBER(5)
  TRXNFEEOVERRIDESEXIST	N	NUMBER(5)
  STGENERAL	N	CHAR(4 BYTE)
  STFINANCIAL	N	CHAR(4 BYTE)
  STAUTHORIZATION	N	CHAR(4 BYTE)
  PRECHANGEREQUESTSTGENERAL	Y	CHAR(4 BYTE)
  NEXTSTMTSERNO	Y	NUMBER(10)
  NEXTSTMTPARTITIONKEY	Y	NUMBER(10)
  TOTALPOINTS	N	NUMBER(16,3)
  TOTALPOINTTRXNS	N	NUMBER(10)
  TOTALCREDITS	N	NUMBER(16,3)
  TOTALDEBITS	N	NUMBER(16,3)
  THISPERIODDUE	N	NUMBER(16,3)
  RETURNEDPAYMENTS	N	NUMBER(16,3)
  BACKDATEDCREDITS	N	NUMBER(16,3)
  BACKDATEDDEBITS	N	NUMBER(16,3)
  BACKDATEDPAYMENTS	N	NUMBER(16,3)
  BACKDATEDRETURNEDPAYMENTS	N	NUMBER(16,3)
  LASTBILLINGDATE	Y	DATE
  LASTTRXNPOSTDATE	Y	DATE
  LASTACTIVITYTRXNPOSTDATE	Y	DATE
  LASTPAYMENTSERNO	Y	NUMBER(10)
  LASTPAYMENTPARTITIONKEY	Y	NUMBER(10)
  LASTBALUPDEODSERNO	Y	NUMBER(10)
  PREVBALUPDEODSERNO	Y	NUMBER(10)
  LASTMTPUPDEODSERNO	Y	NUMBER(10)
  PREVMTPUPDEODSERNO	Y	NUMBER(10)
  INSTALMENTCOUNT	Y	NUMBER(5)
  INSTALMENTBALANCE	N	NUMBER(16,3)
  INSTALMENTBALANCEPRINCIPAL	N	NUMBER(16,3)
  ISSINSTBALANCE	N	NUMBER(16,3)
  ACQINSTBALANCE	N	NUMBER(16,3)
  CASHBALANCE	N	NUMBER(16,3)
  CREATEDATE	N	DATE
  CLOSEDATE	Y	DATE
  EXCESSPAYMENTAMOUNT	N	NUMBER(16,3)
  LATEPAYMENTFEE	Y	NUMBER(16,3)
  ACTIVITYSINCELASTSTATEMENT	N	NUMBER(18,3)
  TRANSACTORHISTORY	Y	CHAR(12)
  STATEMENTINSTALMENTSALLOWED	N	NUMBER(5)
  STATEMENTINSTALMENTSMAXNUM	N	NUMBER(5)
  STATEMENTINSTALMENTSACTIVENUM	Y	NUMBER(5)
  AUTOREDEEMCYCLESTOSKIP	Y	NUMBER(5)
  COLLECTORCASE	Y	NUMBER(10)
  DORMANTACCTYPESERNO	Y	NUMBER(10)
  REPAYMENTPLANSERNO	Y	NUMBER(10)
  REPAYMENTPLANPARTITIONKEY	Y	NUMBER(10)
  MBHAGREEMENTEXPIRYDATE	Y	DATE
  REALFLAG	Y	NUMBER(1)
  EXCLUDEFROMPROBE	Y	CHAR(1)
  LANGUAGECODE	Y	VARCHAR2(10 BYTE)
  LOGACTION	Y	CHAR(11)
  ENTITYVERSIONNO	Y	NUMBER(10)
  CONVERTED	Y	NUMBER(2)
  MBHAGREEMENTSERNO	Y	NUMBER(10)
  PAIDINFULLBALANCE	N	NUMBER(16,3)
  LASTBILLINGREASON	Y	CHAR(1)
  LATEPAYMENTFEETRXNSERNO	Y	NUMBER(10)
  LATEPAYMENTFEETRXNPARTITIONKEY	Y	NUMBER(10)
  `;

  const regex = new RegExp("\t|\n");
  const splits = data.trim().split(regex);
  const splittedArray = splits.map((cell) => cell.trim());
  const groupSize = 3;
  const groupedArray = [];

  for (let i = 0; i < splittedArray.length; i += groupSize) {
    const group = splittedArray.slice(i, i + groupSize);
    groupedArray.push(group);
  }

  const finalModel = {};

  for (const item of groupedArray) {
    const [key, isRequired, type] = item;

    finalModel[key] = {
      type: itemType(type),
    };

    isRequired === "N" ? (finalModel[key].required = true) : null;
  }

  await fs.writeFile(
    __dirname + "/model.txt",
    JSON.stringify(finalModel).replace(/"/g, "")
  );

  return finalModel;
};

generateMongooseModel();
