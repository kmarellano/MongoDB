const mongoose = require("mongoose");
const { Schema } = mongoose;

const cAccountsModel = new Schema({
  INSTITUTION_ID: { type: Number, required: true },
  SERNO: { type: Number, required: true },
  CUSTSERNO: { type: Number, required: true },
  NUMBERX: { type: String, required: true },
  PRIMARYCARDSERNO: { type: Number },
  RISKDOMAINSERNO: { type: Number },
  ACCOUNTTYPE: { type: String, required: true },
  BILLINGMETHOD: { type: String, required: true },
  DAILYACCRUALFLAG: { type: Number },
  PRODUCT: { type: Number, required: true },
  CURRENCY: { type: String, required: true },
  CREDITLIMIT: { type: Number, required: true },
  BALANCE: { type: Number, required: true },
  OPENINGMINAMOUNT: { type: Number, required: true },
  MINAMOUNT: { type: Number, required: true },
  MINAMOUNTWAIVED: { type: Number },
  MINAMTDUEDATE: { type: Date },
  MINAMTPRINTDUEDATE: { type: Date },
  OVERDUEAMOUNT: { type: Number, required: true },
  OVERDUEDATE: { type: Date },
  CUREOVERDUEDATE: { type: Date },
  CUREOVERDUELASTUPDDATE: { type: Date },
  LASTMINAMOUNTWAIVEDDATE: { type: Date },
  STOPDAILYACCRUALREPDATE: { type: Date },
  PAYMENTINDICATOR: { type: Number, required: true },
  ALLOCPROFSERNO: { type: Number },
  FEEPROFSERNO: { type: Number },
  TRXNFEEPROFSERNO: { type: Number },
  INSTPROFSERNO: { type: Number },
  REWARDPROFSERNO: { type: Number },
  CAPROFSERNO: { type: Number },
  SERVICEFEEOVERRIDESEXIST: { type: Number, required: true },
  TRXNFEEOVERRIDESEXIST: { type: Number, required: true },
  STGENERAL: { type: String, required: true },
  STFINANCIAL: { type: String, required: true },
  STAUTHORIZATION: { type: String, required: true },
  PRECHANGEREQUESTSTGENERAL: { type: String },
  NEXTSTMTSERNO: { type: Number },
  NEXTSTMTPARTITIONKEY: { type: Number },
  TOTALPOINTS: { type: Number, required: true },
  TOTALPOINTTRXNS: { type: Number, required: true },
  TOTALCREDITS: { type: Number, required: true },
  TOTALDEBITS: { type: Number, required: true },
  THISPERIODDUE: { type: Number, required: true },
  RETURNEDPAYMENTS: { type: Number, required: true },
  BACKDATEDCREDITS: { type: Number, required: true },
  BACKDATEDDEBITS: { type: Number, required: true },
  BACKDATEDPAYMENTS: { type: Number, required: true },
  BACKDATEDRETURNEDPAYMENTS: { type: Number, required: true },
  LASTBILLINGDATE: { type: Date },
  LASTTRXNPOSTDATE: { type: Date },
  LASTACTIVITYTRXNPOSTDATE: { type: Date },
  LASTPAYMENTSERNO: { type: Number },
  LASTPAYMENTPARTITIONKEY: { type: Number },
  LASTBALUPDEODSERNO: { type: Number },
  PREVBALUPDEODSERNO: { type: Number },
  LASTMTPUPDEODSERNO: { type: Number },
  PREVMTPUPDEODSERNO: { type: Number },
  INSTALMENTCOUNT: { type: Number },
  INSTALMENTBALANCE: { type: Number, required: true },
  INSTALMENTBALANCEPRINCIPAL: { type: Number, required: true },
  ISSINSTBALANCE: { type: Number, required: true },
  ACQINSTBALANCE: { type: Number, required: true },
  CASHBALANCE: { type: Number, required: true },
  CREATEDATE: { type: Date, required: true },
  CLOSEDATE: { type: Date },
  EXCESSPAYMENTAMOUNT: { type: Number, required: true },
  LATEPAYMENTFEE: { type: Number },
  ACTIVITYSINCELASTSTATEMENT: { type: Number, required: true },
  TRANSACTORHISTORY: { type: String },
  STATEMENTINSTALMENTSALLOWED: { type: Number, required: true },
  STATEMENTINSTALMENTSMAXNUM: { type: Number, required: true },
  STATEMENTINSTALMENTSACTIVENUM: { type: Number },
  AUTOREDEEMCYCLESTOSKIP: { type: Number },
  COLLECTORCASE: { type: Number },
  DORMANTACCTYPESERNO: { type: Number },
  REPAYMENTPLANSERNO: { type: Number },
  REPAYMENTPLANPARTITIONKEY: { type: Number },
  MBHAGREEMENTEXPIRYDATE: { type: Date },
  REALFLAG: { type: Number },
  EXCLUDEFROMPROBE: { type: String },
  LANGUAGECODE: { type: String },
  LOGACTION: { type: String },
  ENTITYVERSIONNO: { type: Number },
  CONVERTED: { type: Number },
  MBHAGREEMENTSERNO: { type: Number },
  PAIDINFULLBALANCE: { type: Number, required: true },
  LASTBILLINGREASON: { type: String },
  LATEPAYMENTFEETRXNSERNO: { type: Number },
  LATEPAYMENTFEETRXNPARTITIONKEY: { type: Number },
});

module.exports = mongoose.model("cAccounts", cAccountsModel);
